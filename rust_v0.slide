REST Rust
The pain of dealing with an awkward API
31 May 2017

Aidan Coyle
Supporting Services
acoyle@enova.com

* What Is REST Anyway?

- REST stands for REpresentational State Transfer.
- API consists of CRUD (via HTTP verbs) on Resources, specified by URLs.
- We consider most of our APIs Restful.

* What Isn't REST?

Amortizer is a good example

  POST /amortize
  Content-Type: application/json

  [{
    "accruing": "100",
    "interest_rate": "3.65",
    "start_date": "2012-02-01",
    "due_dates": ["2012-02-03", "2012-02-06", "2012-02-08"]
  }]

  {
    "schedules": [
      {
        "payments": [
          {"date": "2012-02-03", "amount": "34.9"},
          {"date": "2012-02-06", "amount": "34.9"},
          {"date": "2012-02-08", "amount": "34.89"}
        ]
      }
    ]
  }


* REST = Uniform Interface

"When a client holds a representation of a resource, including any metadata attached, it has enough information to modify or delete the resource." -Wikipedia

  GET /resource/1
  {
    "id": 1,
    "name": "my resource",
    "data": "some data"
  }

  # Justifies
  PUT /resource/1
  {
    "id": 1,
    "name": "my resource",
    "data": "other data"
  }

  # OR
  DELETE /resource/1

* Problem #1 Names

What happens if we can't name things consistently?

Payment Data in Leads is named:

- `net_income_per_check` - Sent by provider.
- `income_net_per_check` - Renamed in Leads, used to create an account.
- `net_pay_per_check` - Renamed again in Leads, to update an account. Also returned by Identity
- `income_per_check` - Renamed in Identity Client

* Naming Pain Points

This makes it difficult to use the API. We may need to use any number of names based on what operation we're using, which breaks the uniform interface of the resource.

  account_data = { 'some' => 'data' }
  if updating?
    account_data['income_per_check'] = income
  else
    account_data['income_net_per_check'] = income
  end

  # now do our operation

The only real way to solve this problem is to pick a name and stick with it.

* Problem #2 API Form

How do we know what constitutues a resource?

Employment parameters to create an account are at top level

  {
    "company": "Enova",
    "position": "Engineer",
    "income_payment_method": "direct_deposit"
    # ...
  }

But when fetching or updating an account, they're nested, and they go to a separate endpoint.

  {
    "employer": {
      "company": { "name": "Enova" }
      "position": "Engineer",
      "income_payment_method": "direct_deposit"
    }
  }

* API Form Pain Points

This also breaks the uniform interface, since we don't know what form we need until we know what we're doing with it.

  account_data = { ... }
  if creating?
    post '/v1/account', account_data
  else
    put "/v1/account/#{account_id}/employment", employment: account_data.slice(*employment_params)
  end

We can solve this by correctly delineating resources and using links

  {
    "account_id": 1,
    "name": "Aidan Coyle",
    "links": {
      "employment": "http://identity.enova.com/v1/employments/12345"
    }
  }

* The Cost of Cruft

All of these fixes and hacks incur significant costs including:

- Technical debt and maintenance surface area
- Dark magic
- Development time

So please consider uniform interfaces when you're designing/augmenting APIs.